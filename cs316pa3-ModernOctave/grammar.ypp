%{
	#include <iostream>
	#include <list>
	#include <stack>
	#include <string>
	#include <unordered_map>

	using namespace std;

	extern FILE* yyin;
	extern FILE* yyout;

	int yylex();
	void yyerror(const char* msg);
	
	struct Entry {
		string type;
		string value;
		string line;
	};

	class SymbolTable {
		unordered_map<string, unordered_map<string, struct Entry> *> entryTables;
		unordered_map<string, list<string> *> scopeVars;
		stack<string> scopeStack;
		list<string> scopeList;
		int numBlocks = 1;

		public:

		void createScope() {
			string scopeName = "BLOCK " + to_string(numBlocks);
			unordered_map<string, struct Entry> *newScope = new unordered_map<string, struct Entry>();
			entryTables[scopeName] = newScope;
			list<string> *newScopeVars = new list<string>();
			scopeVars[scopeName] = newScopeVars;
			scopeStack.push(scopeName);
			scopeList.push_back(scopeName);
			numBlocks++;
		}

		void createScope(string scopeName) {
			unordered_map<string, struct Entry> *newScope = new unordered_map<string, struct Entry>();
			entryTables[scopeName] = newScope;
			list<string> *newScopeVars = new list<string>();
			scopeVars[scopeName] = newScopeVars;
			scopeStack.push(scopeName);
			scopeList.push_back(scopeName);
		}

		void exitScope() {
			scopeStack.pop();
		}

		void checkIfDeclared(string varName) {
			unordered_map<string, struct Entry> *currentScope = entryTables[scopeStack.top()];
			if (currentScope->find(varName) != currentScope->end()) {
				// string msg = "DECLARATION ERROR " + varName + " (previous declaration was at line "+to_string(currentScope->)+")\n";
				string msg = "DECLARATION ERROR " + varName + " (previous declaration was at line "+currentScope->at(varName).line+")\n";
				yyerror(msg.c_str());
			}
		}

		void addEntry(string varName, string varType, int line) {
			unordered_map<string, struct Entry> *currentScope = entryTables[scopeStack.top()];
			struct Entry newEntry;
			newEntry.type = varType;
			newEntry.line = to_string(line);
			(*currentScope)[varName] = newEntry;
			scopeVars[scopeStack.top()]->push_back(varName);
		}

		void addEntry(string varName, string varType, int line, string varValue) {
			unordered_map<string, struct Entry> *currentScope = entryTables[scopeStack.top()];
			struct Entry newEntry;
			newEntry.type = varType;
			newEntry.line = to_string(line);
			newEntry.value = varValue;
			(*currentScope)[varName] = newEntry;
			scopeVars[scopeStack.top()]->push_back(varName);
		}

		void printSymbolTables() {
			bool first = true;
			for (string scopeName : scopeList) {
				if (first) {
					first = false;
				}
				else {
					fprintf(yyout, "\n");
				}
				fprintf(yyout, "Symbol table %s\n", scopeName.c_str());
				unordered_map<string, struct Entry> *scope = entryTables[scopeName];
				for (auto it = scopeVars[scopeName]->begin(); it != scopeVars[scopeName]->end(); it++) {
					if (scope->at(*it).value != "") {
						fprintf(yyout, "name %s type %s value %s\n", it->c_str(), scope->at(*it).type.c_str(), scope->at(*it).value.c_str());
					}
					else {
						fprintf(yyout, "name %s type %s\n", it->c_str(), scope->at(*it).type.c_str());
					}
				}
			}
		}
	};

	SymbolTable st;
	string type;
%}

%union {
	std::pair<std::string, int> *str;
}

%token PROGRAM _BEGIN END FUNCTION READ WRITE IF ELSE ENDIF WHILE ENDWHILE CONTINUE BREAK RETURN INT VOID STRING FLOAT
%token DEF ADD MINUS MULT DIV EQ NEQ LT GT OB CB COLON COMMA LEQ GEQ
%token IDENTIFIER INTLITERAL FLOATLITERAL STRINGLITERAL

%type <str> IDENTIFIER id STRINGLITERAL str

%%

program: PROGRAM id _BEGIN
	{
		// Create the global scope
		st.createScope("GLOBAL");
	}
	pgm_body END
	{
		// Exit the global scope
		st.exitScope();
		// Print the symbol tables
		st.printSymbolTables();
	}
	;
id: IDENTIFIER
	;
pgm_body: decl func_declarations
	;
decl: string_decl decl
	| var_decl decl
	| %empty
	;

string_decl: STRING id DEF str COLON
	{
		// Check if the variable is already declared in the current scope
		st.checkIfDeclared($2->first);
		// Add the variable to the current scope
		st.addEntry($2->first, "STRING", $2->second, $4->first);
	}
	;
str: STRINGLITERAL
	;

var_decl: var_type id_list_decl COLON
	;
var_type: FLOAT
	{
		type = "FLOAT";
	}
	| INT
	{
		type = "INT";
	}
	;
any_type: var_type 
	| VOID
	;
id_list_decl: id
	{
		// Check if the variable is already declared in the current scope
		st.checkIfDeclared($1->first);
		// Add the variable to the current scope
		st.addEntry($1->first, type, $1->second);
	}
	id_tail_decl
id_tail_decl: COMMA id
	{
		// Check if the variable is already declared in the current scope
		st.checkIfDeclared($2->first);
		// Add the variable to the current scope
		st.addEntry($2->first, type, $2->second);
	} 
	id_tail_decl
	| %empty
	;
id_list: id id_tail
id_tail: COMMA id id_tail
	| %empty
	;

param_decl_list: param_decl param_decl_tail
	| %empty
	;
param_decl: var_type id
	{
		// Check if the variable is already declared in the current scope
		st.checkIfDeclared($2->first);
		// Add the variable to the current scope
		st.addEntry($2->first, type, $2->second);
	}
	;
param_decl_tail: COMMA param_decl param_decl_tail
	| %empty
	;

func_declarations: func_decl func_declarations
	| %empty
	;
func_decl: FUNCTION any_type id
	{
		// Create a new scope for the function
		st.createScope($3->first);
	}
	OB param_decl_list CB _BEGIN func_body END
	{
		// Exit the function scope
		st.exitScope();
	}
	;
func_body: decl stmt_list
	;

stmt_list: stmt stmt_list 
	| %empty
	;
stmt: base_stmt 
	| if_stmt
	| while_stmt
	;
base_stmt: assign_stmt 
	| read_stmt 
	| write_stmt 
	| return_stmt
	;

assign_stmt: assign_expr COLON
	;
assign_expr: id DEF expr
	;
read_stmt: READ OB id_list CB COLON
	;
write_stmt: WRITE OB id_list CB COLON
	;
return_stmt: RETURN expr COLON
	;

expr: expr_prefix factor
	;
expr_prefix: expr_prefix factor addop
	| %empty
	;
factor: factor_prefix postfix_expr
	;
factor_prefix: factor_prefix postfix_expr mulop
	| %empty
	;
postfix_expr: primary 
	| call_expr
	;
call_expr: id OB expr_list CB
	;
expr_list: expr expr_list_tail
	| %empty
	;
expr_list_tail: COMMA expr expr_list_tail
	| %empty
	;
primary: OB expr CB
	| id
	| INTLITERAL
	| FLOATLITERAL
	;
addop: ADD 
	| MINUS
	;
mulop: MULT
	| DIV
	;

if_stmt: IF 
	{
		// Create a new scope for the if statement
		st.createScope();
	}
	OB cond CB decl stmt_list 
	{
		// Exit the if statement scope
		st.exitScope();
	}
	else_part ENDIF
	;
else_part: ELSE 
	{
		// Create a new scope for the else statement
		st.createScope();
	}
	decl stmt_list
	{
		// Exit the else statement scope
		st.exitScope();
	}
	| %empty
	;
cond: expr compop expr
	;
compop: LT
	| GT
	| EQ
	| NEQ
	| LEQ
	| GEQ
	;

while_stmt: WHILE 
	{
		// Create a new scope for the while statement
		st.createScope();
	}
	OB cond CB decl aug_stmt_list ENDWHILE
	{
		// Exit the while statement scope
		st.exitScope();
	}
	;
aug_stmt_list: aug_stmt aug_stmt_list
	| %empty
	;
aug_stmt: base_stmt
	| aug_if_stmt
	| while_stmt
	| CONTINUE COLON
	| BREAK COLON
	;

aug_if_stmt: IF 
	{
		// Create a new scope for the if statement
		st.createScope();
	}
	OB cond CB decl aug_stmt_list 
	{
		// Exit the if statement scope
		st.exitScope();
	}
	aug_else_part ENDIF
	;

aug_else_part: ELSE 
	{
		// Create a new scope for the else statement
		st.createScope();
	}
	decl aug_stmt_list
	{
		// Exit the else statement scope
		st.exitScope();
	}
	| %empty
	;

%%
